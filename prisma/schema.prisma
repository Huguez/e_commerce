// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
	provider = "prisma-client-js"
}

datasource db {
	provider = "postgresql"
	url      = env("DATABASE_URL")
}

enum Size {
	XS
	S
	M
	L
	XL
	XXL
	XXXL
}

enum Gender {
	men
	women
	kid
	unisex
}

enum Role {
	customer
	admin
}

enum Status {
	active
	unverified
	banned
}

model Category {
	id String @id @default( uuid() )
	name String @unique

	Product Product[]
}

model Product {
	id          String   @id @default( uuid() )
	title       String
	description String
	inStock     Int
	price       Float    @default( 0.0 )
	sizes       Size[]
	slug        String   @unique
	tags        String[] @default( [] )
	gender      Gender

	// Relationships
	categoryId  String
	category    Category @relation( fields: [ categoryId ], references: [ id ] )

	images      ProductImage[]
	orderItems OrderItem[]

	@@index([ gender ])
}

model ProductImage {
	id        String  @id @default( uuid() )
	url       String

	productId String
	product   Product @relation( fields: [ productId ], references: [ id ] )
}

model User {
	id           String @id @default( uuid() )
	name         String
	email        String @unique
	emailVerifed DateTime?
	password     String
	role         Role @default( customer )
	imageProfile String?
	status       Status @default( unverified )

	address      UserAddress?
	orders       Order[]
}

model Country {
	id   String @id @default( uuid() )
	name String
	code String
	UserAddress UserAddress[]
	OrderAddress OrderAddress[]
}

model UserAddress {
	id       String @id @default( uuid() )
	name     String
	lastname String
	address  String
	addressOptional String?
	codeZip  String 
	city     String 
	phone    String

	// relationship
	country Country @relation( fields: [ countryId ], references: [id] )
	countryId String

	userId String @unique
	user User @relation( fields: [ userId ], references: [id] )
}

model Order {
	id           String @id @default( uuid() )
	subtotal     Float
	tax          Float
	total        Float
	itemsInOrder Int
	isPaid       Boolean? @default( false )
	delivered    DateTime?
	paidAt       DateTime?

	createdAt DateTime @default( now() )
	updatedAt DateTime @updatedAt
	
	user User @relation( fields: [ userId ], references: [ id ] )	
	userId       String

	OrderItems OrderItem[]
	OrderAddress OrderAddress?

	transactionId String?
}

model OrderItem {
	id        String @id @default( uuid() )
	quantity  Int
	price     Float
	size      Size
	orderId   String
	productId String

	product Product @relation( fields: [ productId ], references: [ id ] )

	order Order @relation( fields: [ orderId ], references: [ id ] )
}

model OrderAddress {
	id              String @id @default( uuid() )
	name            String
   lastname        String
   address         String
   addressOptional String?
   codeZip         String
   city            String
   phone           String
	countryId       String
	orderId         String @unique

   country Country @relation( fields: [ countryId ], references: [ id ] )
	order   Order   @relation( fields: [ orderId ], references: [ id ] )
}

